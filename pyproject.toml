[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "csv-word-converter"
version = "1.0.0"
description = "专业的CSV到Word文档转换工具"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AI Development Team", email = "dev@example.com"}
]
maintainers = [
    {name = "AI Development Team", email = "dev@example.com"}
]
keywords = ["csv", "word", "document", "conversion", "office", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Office Suites",
    "Topic :: Text Processing :: Markup",
    "Topic :: Utilities",
]
requires-python = ">=3.8"
dependencies = [
    "pandas>=2.0.0",
    "python-docx>=1.1.0",
    "docxcompose>=1.4.0",
    "PyYAML>=6.0.0",
    "Pillow>=10.0.0",
    "requests>=2.28.0",
    "pathvalidate>=3.0.0",
    "openpyxl>=3.1.0",
    "lxml>=4.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "flake8>=6.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pylint>=2.17.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "isort>=5.12.0",
    "radon>=6.0.1",
    "pre-commit>=3.0.0",
]
api = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=2.0.0",
    "python-multipart>=0.0.6",
]
web = [
    "streamlit>=1.28.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]
all = [
    "csv-word-converter[dev,api,web,test,docs]"
]

[project.scripts]
csv2word = "csv_word_converter.cli:main"
csv-word-convert = "csv_word_converter.cli:main"

[project.urls]
Homepage = "https://github.com/your-org/csv-word-converter"
Documentation = "https://csv-word-converter.readthedocs.io/"
Repository = "https://github.com/your-org/csv-word-converter.git"
"Bug Tracker" = "https://github.com/your-org/csv-word-converter/issues"
Changelog = "https://github.com/your-org/csv-word-converter/blob/main/CHANGELOG.md"

# 工具配置
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*"]

[tool.setuptools.package-data]
csv_word_converter = [
    "templates/*.docx",
    "templates/*.yaml", 
    "config/*.yaml",
    "config/*.json",
]

# Black代码格式化配置
[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # 排除目录
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | frontend
)/
'''

# isort导入排序配置
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/venv/*", "*/frontend/*"]

# MyPy类型检查配置
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "docx.*",
    "docxcompose.*",
    "pandas.*",
    "yaml.*",
    "PIL.*",
]
ignore_missing_imports = true

# Pytest测试配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/csv_word_converter",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage配置
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/frontend/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pylint配置
[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
]

[tool.pylint.format]
max-line-length = 120

# Bandit安全检查配置
[tool.bandit]
exclude_dirs = ["tests", "frontend", ".venv"]
skips = ["B101", "B601"]